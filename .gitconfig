[user]
    email = festum@g.pl
    name = Festum Qin
[filter "lfs"]
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
    clean = git-lfs clean -- %f
[pull]
	rebase = true
[submodule]
    # Move git pull automatically update submodules to git checkout. Default is `on-demand`.
    recurse = false
[receive]
    # Resolving: fatal: the receiving end does not support push options
    advertisePushOptions = true
[alias]
    main = !git symbolic-ref refs/remotes/origin/HEAD | cut -d"/" -f4

    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty="format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>(%ae)%Creset'" --abbrev-commit --no-merges --date=iso

    # View the current working tree status using the short format
    s = status -sb

    # Pull in remote changes for the current repository and all its submodules
    p = pull --recurse-submodules
    pa = pull --all
    pf = pull --all --rebase --autostash
    pm = pull --rebase --autostash origin $(git-main-branch)
    pu = fetch upstream && git rebase upstream/$(git-main-branch)

    # Checkout
    c = checkout --recurse-submodules

    # Clone a repository including all submodules
    cl = clone --recursive
    c1 = clone --depth=1

    # Diff
    d = diff --no-renames -b -w --ignore-blank-lines --color
    dc = diff --cached
    dcs = diff --cached --shortstat
    dm = diff --cached main...

    # Print files in the tree that are not under source control
    ignored = clean -ndX

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # Pretty log format
    plog = log --decorate --oneline --graph

    # Show status log with changed-files summary
    slog = log --name-status

    # Submodule
    sm = submodule
    smi = submodule update --init --recursive
    smu = submodule update --remote --merge --recursive
    smp = submodule foreach git pull
    smr = submodule foreach --recursive git reset --hard
    
    # Rebase
    rb = rebase
    rbm = rebase -i --autosquash origin/main --no-verify
    rba = rebase --abort
    rbc = rebase --continue
    rbs = rebase --skip

    # Push
    u = push --force-with-lease
    us = push --force-with-lease -o ci.skip
    uo = push --force-with-lease origin

    # Useful when leaving or starting a refactoring or before popping a stash
    wip = commit --no-verify --message 'wip'
    rm= rm --ignore-unmatch -f -r --cached
    a = add
    aa = add .

    # Branch
    b = branch
    bd = branch -D
    bdr = push -d origin

    # Diff
    diff = diff --no-index --ignore-blank-lines --color
    d = diff --no-renames -b -w --ignore-blank-lines --color
    dc = diff --cached --ignore-blank-lines --color
    dcs = diff --cached --shortstat --ignore-blank-lines --color
    # Show the diff between the latest commit and the current state
    ds = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
 
    # List aliases
    aliases = !git config --get-regexp alias\\. | sed -E "s/alias\\.//"

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Commit all changes
    ca = !git add -A && git commit -av

    # Show local branches that have been merged into main
    merged = !git branch --all --merged origin/$(git main) | cut -c3- | grep -v $(git main)

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    t = tag -l
    dt = describe --tags --abbrev=0
    branches = !git branch -a -vv | cut -c -119
    #branches = branch -a
    rmt =remote
    rmv = remote -v
    rma = remote add
    rmau = remote add upstream
    rmsh = remote set-head origin --auto
    rmsu = remote set-url --add --push origin
    rmrm = remote rm

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with master
    # a.k.a. "delete merged"
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # Merge when pipeline succeeds alias.
    # Example: git mwps origin <local-branch-name>
    mwps = !git push -o merge_request.create -o merge_request.target=$(git main) -o merge_request.merge_when_pipeline_succeeds


[apply]
    # Detect white spaces errors when applying a patch
    whitespace = fix
[core]
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore_global
    attributesfile = ~/.gitattributes

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true
    editor = nvim
    pager = diff-so-fancy | less --tabs=4 -RFX
[color]
    ui = true
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = 11
    frag = magenta bold
    old = red bold
    new = green bold
    func = 146 bold
    commit = yellow bold
    whitespace = red reverse
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22
[commit]
    # https://help.github.com/articles/signing-commits-using-gpg/
    gpgsign = true
[diff]
    # Detect copies as well as renames
    renames = copies
    tool = nvimdiff
[diff "bin"]
    # Use `hexdump` to diff binary files
    textconv = hexdump -v -C
[difftool]
    prompt = true
[difftool "vscode"]
    cmd = code --wait --diff $LOCAL $REMOTE
[difftool "nvimdiff"]
    cmd = nvim -d -O \"$LOCAL\" \"$REMOTE\"
[help]
    autocorrect = 1
[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true
[push]
    # https://git-scm.com/docs/git-config#git-config-pushdefault
    default = simple
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true
    autoSetupRemote = true
[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
    insteadOf = "github:"
[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
    insteadOf = "gist:"
[init]
    defaultBranch = main
[interactive]
    diffFilter = diff-so-fancy --patch
[rebase]
	autoStash = true
[includeIf "gitdir:~/src/"]
  path = ~/.gitconfig-local
